require 'set'
require 'net/smtp'
require 'date'

if ARGV.length < 1 && ARGV[0] != '-h' && ARGV[0] != '--help'
    puts "USAGE: ruby ./script_name file"
    exit
end
if ARGV[0] == '-h' || ARGV[0] == '--help'
    puts "USAGE: ruby ./script_name file\n"
    puts "[+] Example of Usage: ruby ./script.rb log.txt"
end
if not File.exist?("#{ARGV[0]}") 
    puts "[+] File Log Not Found [+]\n"
    puts "USAGE: ruby ./script_name file"
    exit
end
def fileMaxLines (file)
    count = 0
    file.each do |line|
        count = count + 1
    end
    return count
end
found_patterns = Set[]
# Patterns:
sql_injection_1 = "union"
sql_injection_2 = "order"
sql_injection_3 = "group"
local_file_inclusion_1 = "/etc/passwd"
local_file_inclusion_2 = "/etc/passwd%20"
local_file_inclusion_3 = "../"
local_file_inclusion_4 = "./"

remote_file_inclusion_1 = "c99" # shell php called in rfi exploitation
remote_file_inclusion_2 = "=http://"
remote_file_inclusion_3 = "=https://"

cross_site_scripting_1 = "xss" 
cross_site_scripting_2 = "alert"
cross_site_scripting_3 = "script"
cross_site_scripting_4 = "iframe"
cross_site_scripting_5 = "javascript"
cross_site_scripting_6 = "<"
cross_site_scripting_7 = ">"
cross_site_scripting_8 = "document.cookie"

#Add patterns in array pattern
arr_pattern = []
arr_pattern << sql_injection_1
arr_pattern << sql_injection_2
arr_pattern << sql_injection_3
arr_pattern << local_file_inclusion_1
arr_pattern << local_file_inclusion_2
arr_pattern << local_file_inclusion_3
arr_pattern << local_file_inclusion_4
arr_pattern << remote_file_inclusion_1
arr_pattern << remote_file_inclusion_2
arr_pattern << remote_file_inclusion_3

arr_pattern << cross_site_scripting_1
arr_pattern << cross_site_scripting_2
arr_pattern << cross_site_scripting_3
arr_pattern << cross_site_scripting_4
arr_pattern << cross_site_scripting_5
arr_pattern << cross_site_scripting_6
arr_pattern << cross_site_scripting_7
arr_pattern << cross_site_scripting_8



file = File.new("#{ARGV[0]}", "r")
maxlines = fileMaxLines(file)
puts "[+] File Opened successfuly, max length = #{maxlines}\n"
puts "[++] Looking For Possible Hacks Attempts... [++]"
file.close
arr_pattern.each do |vector|
    file = File.new("#{ARGV[0]}", "r")
    file.each do |line|
        line = line.downcase.to_s
        line.scan("#{vector.downcase}") do |track|
            found_patterns << line.chomp.to_s

        end
    end
    if found_patterns.any?
        puts "Attempts found: "+found_patterns.length.to_s
        found_patterns.each do |r|
            puts r
        end
    end
    file.close

    current_time = DateTime.now
    date = current_time.strftime "%d_%m_%Y_%H_%M_%S"
    nome_saida = "out_"+date
    out = File.new("#{nome_saida.to_s}", "w")


    if found_patterns.any?
        found_patterns.each do |r|
            out.puts "Payload Indentificado: #{r}"
        end
    end

    out.close
end